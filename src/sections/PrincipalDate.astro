---
import CalendarButton from "../components/CalendarButton.astro"
      

import { LANDING_PAGE } from "@/i18n/landing-page";
import { useTranslations } from "@/i18n/useTranslations";

const { lang } = Astro.props
const t = useTranslations(LANDING_PAGE, lang, 'principal_date')
---

<section
  class="animate-fade-in animate-delay-500 mt-16 md:mt-32 mx-auto flex flex-col place-items-center text-center text-primary"
>
  <div class="uppercase text-3xl md:text-5xl font-semibold">
    <time class="date"> 4 de marzo</time>
    <span aria-hidden="true" class="hidden md:inline mx-1">·</span>
    <br aria-hidden="true" class="block md:hidden" />
    <time class="time"></time>
  </div>

  <h2
    class="uppercase text-lg lg:text-2xl font-medium flex flex-col max-w-sm mt-6"
  >
    <span>{t('principal_date.presentation_event')}</span>
    <a
      href="https://maps.app.goo.gl/RFzHUVDhRqdQaTAo8"
      class="hover:scale-110 hover:opacity-60 transition inline-block"
      target="_blank"
      rel="noopener"
    >
      {t('principal_date.victoria_theater')}
    </a>
  </h2>

  <div class="flex flex-col md:flex-row items-center mt-6 gap-6">
    <a
      class={`
				border-primary border-2 font-medium uppercase text-lg
				px-4 py-1
				hover:bg-primary hover:text-secondary hover:scale-110
				transition inline-block
			`}
      href="https://www.teatrevictoria.com/es/cartelera/c/190_la-velada-del-ano-4.html"
      target="_blank"
      rel="noopener noreferrer"
    >
      {t('principal_date.available_tickets')}
    </a>


    <CalendarButton />

  </div>
</section>

<script>
  import { EVENT_TIMESTAMP } from "@/consts/event-date"
  const $dateSpan = document.querySelector(".date")
  const $timeSpan = document.querySelector(".time")

  const USER_TZ = Intl.DateTimeFormat().resolvedOptions().timeZone
  const date = new Date(EVENT_TIMESTAMP)

  const eventHasPassed = EVENT_TIMESTAMP < Date.now()

  if (eventHasPassed) {
    document.getElementById("add-to-calendar")?.remove()
  }

  const timeFormatOptions: Intl.DateTimeFormatOptions = {
    hour: "numeric",
    minute: "numeric",
    hour12: false,
    timeZone: USER_TZ,
    timeZoneName: "short",
  }

  const dateFormatOptions: Intl.DateTimeFormatOptions = {
    day: "numeric",
    month: "long",
    timeZone: USER_TZ,
  }

  const validDatetimeAttrOptions: Intl.DateTimeFormatOptions = {
    timeZone: USER_TZ,
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
    hour: "2-digit",
    minute: "2-digit",
    second: "2-digit",
    hour12: false,
  }

  // The "en-GB" locale is used to display the time zone abbreviation (CET, PST, EST...) and not its value in GMT
  const time = new Intl.DateTimeFormat("en-GB", timeFormatOptions)
    .formatToParts(date)
    .map(({ type, value }) => {
      if (type === "literal" && value === " ") {
        return "H "
      }
      return value
    })
    .join("")

  const day = new Intl.DateTimeFormat("es-ES", dateFormatOptions).format(date)

  /**
   * Se usa la configuración regional "en-CA" para obtener de forma más fácil el formato `yyyy-mm-dd`
   * source: https://stackoverflow.com/a/63490548
   * El datetime strings válido usado es: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time#a_valid_local_date_and_time_string
   */
  const validDatetime = new Intl.DateTimeFormat(
    "en-CA",
    validDatetimeAttrOptions
  ).format(date)

  if ($dateSpan != null && $timeSpan != null) {
    $dateSpan.innerHTML = day
    $dateSpan.setAttribute("datetime", validDatetime)
    $timeSpan.innerHTML = time
    $timeSpan.setAttribute("datetime", validDatetime)
  }
</script>
